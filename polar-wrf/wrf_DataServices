import xarray as xr
import matplotlib.pyplot as plt
import numpy as np
import os
from wrf import getvar, interplevel
from netCDF4 import Dataset
import gc
import xarray as xr
import timeit

g = 9.81

class WrfDataServices():
    def __init__(self,ds_path,path_out = '/home/k1sumwalt/clean_data/pwrf/2022-02-07/pwrf_all'):
        self.path = ds_path
        self.save_path = path_out
        self.wrf_list = sorted([f for f in os.listdir(ds_path) if f.startswith('wrfout')])
    def get_vars(self):
        ds_list = []
        for file in self.wrf_list[:]:
            print("Getting Variables from WRF Dataset")
            wrfin = Dataset(os.path.join(self.path,file))
            #get necessary variables for processing
            XLAT = getvar(wrfin, "XLAT")
            XLONG = getvar(wrfin, "XLONG")
            T2 = getvar(wrfin, "T2")
            p = getvar(wrfin,"pressure")
            ht = getvar(wrfin, "z", units="dm")
            z_500 = interplevel(ht, p, 500.0)
            PRECIP1 = getvar(wrfin, "RAINNC")
            PRECIP2 = getvar(wrfin, "RAINC")
            QVAP = getvar(wrfin, "QVAPOR")  #Water vapor/air
            u = getvar(wrfin, "ua")
            v = getvar(wrfin, "va")

            #Variables to calculate: Total Precip, IVT, IWV(TCWV)
            Total_Precip = PRECIP1 + PRECIP2

            #IWV = water vapor integrated over all pressure levels 
            #IWV = Integral over pressure levels of specific humidiaty as a function of pressure 
            #pressure level defined by difference between pressure levels
            dp = p[:-1,:,:] - p[1:,:,:]
            q_layer = 0.5 * (QVAP[:-1, :, :] + QVAP[1:, :, :]) #mean specific per layer
            TCWV = ((1/g) * q_layer * dp).sum(dim = "bottom_top")

            #IVT (Integrated Vapor Transport)
            #calculate how much total vapor is moving at each layer
            u_layer = 0.5 * (u[:-1, :, :] + u[1:, :, :]) #average to approx the wind at each layer
            v_layer = 0.5 * (v[:-1, :, :] + v[1:, :, :])
            u_flux = (1/g) * q_layer * dp * u_layer
            v_flux = (1/g) * q_layer * dp * v_layer #calculate flux at each layer
            IVT_u = u_flux.sum(dim = "bottom_top")
            IVT_v = v_flux.sum(dim = "bottom_top")
            IVT = np.sqrt(IVT_u **2  + IVT_v ** 2)

            #save the variables
            IVT = IVT.assign_coords(XLAT = XLAT, XLONG = XLONG)
            IWV = TCWV.assign_coords(XLAT = XLAT, XLONG = XLONG)
            T2 = T2.assign_coords(XLAT = XLAT, XLONG = XLONG)
            Z_500 = z_500.assign_coords(XLAT = XLAT, XLONG = XLONG)
            TP = Total_Precip.assign_coords(XLAT = XLAT, XLONG = XLONG)
            T2.name = "T2"
            Z_500.name = "Z_500"
            TP.name = "TP"
            IWV.name = "IWV"
            IVT.name = "IVT"

            #save as a dataset
            ds_out = xr.Dataset({
                "IWV" : IWV,
                "IVT" : IVT,
                "T2": T2,
                "TP": TP,
                "Z_500":Z_500})

            ds_list.append(ds_out)
            del wrfin
            gc.collect()

        ds = xr.concat(ds_list, dim = 'Time')
        mask = ds['XLAT'] < -30
        ds = ds.where(mask, drop = True)
        ds = ds.drop_attrs() #drops the projection 
        encoding = {var: {'_FillValue': -9999.0, 'zlib': True} for var in ds.data_vars}
        ds.load()
        ds.to_netcdf(f'{self.save_path}.nc')
        print("Hourly Data Set Succesfully Created....")
        self.output_ds = ds

    def six_hourify(self):
        list_of_vars = ["T2","TP","IWV","IVT","Z_500"]
        new_ds_list = []
        for variable in list_of_vars:
            if variable != "TP":
                variable = self.output_ds[variable].resample(Time = '6h').mean()
            else:
                variable = self.output_ds[variable].resample(Time = '6h').sum()

            new_ds_list.append(variable)
            ds_6H = xr.merge(new_ds_list)
            ds_6H.to_netcdf(f'{self.save_path}_6H.nc')
            print("Saved in 6 hourly form...")
            self.ds_6H = ds_6H

    def spatial_interpolation(self):
        print("unfinished business in the interpolation")

    def run(self):
       self.get_vars()
       self.six_hourify()
       self.spatial_interpolation()

